Do $itasks.[tcCurrentLibrary].$GetVar(nam(tConstants)) Returns tConstants
Do $itasks.[tcCurrentLibrary].$GetVar(nam(tlDatabases)) Returns tlDatabases
Do $itasks.[tcCurrentLibrary].$GetVar(nam(irConfigFile)) Returns irConfigFile

Do $DefineList(trTaskStats,'infra.tsysTaskStats')     ;; trTaskStats is used in $ServerTime
If tConstants.LogTaskStats     ;; this is now set from the SQLite libini value
	Do $iremotetasks.$makelist($ref.$name,$ref.$ident) Returns llConnections
	;  to log number of simultaneous connections:     ;; timestamp start, current no of connections
	;  on $destruct record     ;; timestamp end, current no of connections & reason(?) such as timeout v. close form
	Calculate trTaskStats.STS_START as #D
	Calculate trTaskStats.STS_COUNT_START as llConnections.$linecount
	Calculate trTaskStats.STS_IP4 as $cinst.$clientaddress()
	Calculate trTaskStats.STS_TYPE as '?'     ;; unknown call type at this point, this must be set in the subclass
	Calculate trTaskStats.STS_INIT_CLASS as prParams.OmnisClass
	Calculate trTaskStats.STS_DB_REQUESTS as 0
	Calculate trTaskStats.STS_FETCHES as 0
	Calculate trTaskStats.STS_INSERTS as 0
	Calculate trTaskStats.STS_UPDATES as 0
	Calculate trTaskStats.STS_DELETES as 0
	If prParams.JSscreenHeight>0
		Calculate trTaskStats.STS_DEVICE_SIZE as con('{',kDq,'JSscreenSize',kDq,':',kDq,prParams.JSscreenSize,kDq,',',kDq,'JSscreenHeight',kDq,':',kDq,prParams.JSscreenHeight,kDq,',',kDq,'JSscreenWidth',kDq,':',kDq,prParams.JSscreenWidth,kDq,'}')
	End If
	Calculate trTaskStats.STS_BROWSER as con('{',kDq,'appName',kDq,':',kDq,prParams.appname,kDq,',',kDq,'userAgent',kDq,':',kDq,prParams.userAgent,kDq,'}')
	Do trTaskStats.$insert() Returns lbOK
End If

;  in MEC, tConstants already has the following columns     ;; call the new method $addColumn which checks for existence before adding
Do $cinst.$addColumnToListOrRow(tConstants,'companyLogo',kBinary)
Do $cinst.$addColumnToListOrRow(tConstants,'pBanner',kBinary)
Do $cinst.$addColumnToListOrRow(tConstants,'topLeft',kBinary)
Do $cinst.$addColumnToListOrRow(tConstants,'topRight',kBinary)


Do toValues.$initInherited('SERVER','TIMEOUT') Returns lrReference
If lrReference.RFO_INT>0
	Do $cinst.$setTimeout(lrReference.RFO_INT)
End If