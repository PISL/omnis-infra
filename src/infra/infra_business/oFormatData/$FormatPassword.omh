Calculate icValidationText as ''
Calculate icValidationCodes as ''
Calculate icInvalidChars as ''

If pLangCode<>''
	Do StringTable.$setcolumn(pLangCode) Returns #F
End If

If isnumber(mid(pCriteria,1,1))
	Calculate lnMinLength as strtok(nam(pCriteria),',')
End If
If lnMinLength=0
	Calculate lnMinLength as 8
End If

;  length, mixed case and a numeric digit required
If len(pPassword)<lnMinLength
	Do toStrings.$StringTableMessage('VAL_PASSWORD_MIN_LENGTH',lcDescription,icValidationCodes) Returns lbStringTableEntryFound
	If lbStringTableEntryFound
		Calculate icValidationText as con(lcDescription,lnMinLength)
	Else
		Calculate icValidationText as con(icValidationText,pick(icValidationText<>'','',', '),'minimum length for password is  ',lnMinLength)
	End If
Else
	If len(pPassword)>0
		For lnPos from 1 to len(pPassword) step 1
			Calculate lcChar as mid(pPassword,lnPos,1)
			If lcChar>='A'&lcChar<='Z'
				Calculate lbUpper as kTrue
			Else If lcChar>='a'&lcChar<='z'
				Calculate lbLower as kTrue
			Else If lcChar>='0'&lcChar<='9'
				Calculate lbDigit as kTrue
			Else If pos(lcChar,'!@£$%^&*()-_=+[]{};:\|,<.>/?"''~`§±')
				Calculate lbPunctuation as kTrue
			End If
		End For
		
		Do toStrings.$StringToList(pCriteria,',',kTrue) Returns llCriteria
		While $Loop(llCriteria)
			Switch upp(llCriteria.LINE)
				Case 'UPPER'
					If lbUpper
						Calculate lnCriteriaSatisfied as lnCriteriaSatisfied+1
					End If
					
					Do toStrings.$StringTableMessage('VAL_PASSWORD_FORMAT_UPPER',lcDescription,icValidationCodes) Returns lbStringTableEntryFound
					If not(lbStringTableEntryFound)
						Calculate lcDescription as con(lcDescription,pick(lcDescription<>'','',', '),'upper case')
					End If
					
				Case 'LOWER'
					If lbLower
						Calculate lnCriteriaSatisfied as lnCriteriaSatisfied+1
					End If
					
					Do toStrings.$StringTableMessage('VAL_PASSWORD_FORMAT_LOWER',lcDescription,icValidationCodes) Returns lbStringTableEntryFound
					If not(lbStringTableEntryFound)
						Calculate lcDescription as con(lcDescription,pick(lcDescription<>'','',', '),'lower case')
					End If
					
				Case 'DIGIT','NUM','NUMBER'
					If lbDigit
						Calculate lnCriteriaSatisfied as lnCriteriaSatisfied+1
					End If
					
					Do toStrings.$StringTableMessage('VAL_PASSWORD_FORMAT_NUMBER',lcDescription,icValidationCodes) Returns lbStringTableEntryFound
					If not(lbStringTableEntryFound)
						Calculate lcDescription as con(lcDescription,pick(lcDescription<>'','',', '),'number')
					End If
					
				Case 'PUNCTUATION'
					If lbPunctuation
						Calculate lnCriteriaSatisfied as lnCriteriaSatisfied+1
					End If
					
					Do toStrings.$StringTableMessage('VAL_PASSWORD_FORMAT_PUNCTUATION',lcDescription,icValidationCodes) Returns lbStringTableEntryFound
					If not(lbStringTableEntryFound)
						Calculate lcDescription as con(lcDescription,pick(lcDescription<>'','',', '),'punctuation')
					End If
					
				Default
					;  doh
			End Switch
		End While
		
		If llCriteria.$linecount=lnCriteriaSatisfied
			;  all ingredients there
		Else
			Do toStrings.$StringTableMessage('VAL_POSTCODE_INVALID_FORMAT',icValidationText,icValidationCodes) Returns lbStringTableEntryFound
			If lbStringTableEntryFound
				Calculate icValidationText as con(icValidationText,pick(icValidationText<>'','',', '),' (',lcDescription,')')
			Else
				Calculate icValidationText as con(icValidationText,pick(icValidationText<>'','',', '),'Invalid password format (',lcDescription,')')
			End If
		End If
	End If
	
End If

Quit method icValidationText     ;; use $ReturnError for explanation